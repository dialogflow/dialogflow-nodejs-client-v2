// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  APICallback,
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  LROperation,
  PaginationCallback,
  PaginationResponse,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './intents_client_config.json';

const version = require('../../../package.json').version;

/**
 *  An intent represents a mapping between input from a user and an action to
 *  be taken by your application. When you pass user input to the
 *  {@link google.cloud.dialogflow.v2.Sessions.DetectIntent|DetectIntent} (or
 *  {@link google.cloud.dialogflow.v2.Sessions.StreamingDetectIntent|StreamingDetectIntent}) method, the
 *  Dialogflow API analyzes the input and searches
 *  for a matching intent. If no match is found, the Dialogflow API returns a
 *  fallback intent (`is_fallback` = true).
 *
 *  You can provide additional information for the Dialogflow API to use to
 *  match user input to an intent by adding the following to your intent.
 *
 *  *   **Contexts** - provide additional context for intent analysis. For
 *      example, if an intent is related to an object in your application that
 *      plays music, you can provide a context to determine when to match the
 *      intent if the user input is "turn it off". You can include a context
 *      that matches the intent when there is previous user input of
 *      "play music", and not when there is previous user input of
 *      "turn on the light".
 *
 *  *   **Events** - allow for matching an intent by using an event name
 *      instead of user input. Your application can provide an event name and
 *      related parameters to the Dialogflow API to match an intent. For
 *      example, when your application starts, you can send a welcome event
 *      with a user name parameter to the Dialogflow API to match an intent with
 *      a personalized welcome message for the user.
 *
 *  *   **Training phrases** - provide examples of user input to train the
 *      Dialogflow API agent to better match intents.
 *
 *  For more information about intents, see the
 *  [Dialogflow
 *  documentation](https://cloud.google.com/dialogflow/docs/intents-overview).
 * @class
 * @memberof v2
 */
export class IntentsClient {
  private _descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  private _innerApiCalls: {[name: string]: Function};
  private _pathTemplates: {[name: string]: gax.PathTemplate};
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  operationsClient: gax.OperationsClient;
  intentsStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of IntentsClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof IntentsClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = typeof window !== 'undefined';
    if (isBrowser) {
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof IntentsClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this._pathTemplates = {
      agentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/agent'
      ),
      contextPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/agent/sessions/{session}/contexts/{context}'
      ),
      entityTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/agent/entityTypes/{entity_type}'
      ),
      intentPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/agent/intents/{intent}'
      ),
      sessionEntityTypePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/agent/sessions/{session}/entityTypes/{entity_type}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      listIntents: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'intents'
      ),
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback
      ? this._gaxModule.protobuf.Root.fromJSON(
          require('../../protos/protos.json')
        )
      : this._gaxModule.protobuf.loadSync(nodejsProtoPath);

    this.operationsClient = this._gaxModule
      .lro({
        auth: this.auth,
        grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
      })
      .operationsClient(opts);
    const batchUpdateIntentsResponse = protoFilesRoot.lookup(
      '.google.cloud.dialogflow.v2.BatchUpdateIntentsResponse'
    ) as gax.protobuf.Type;
    const batchUpdateIntentsMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Struct'
    ) as gax.protobuf.Type;
    const batchDeleteIntentsResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const batchDeleteIntentsMetadata = protoFilesRoot.lookup(
      '.google.protobuf.Struct'
    ) as gax.protobuf.Type;

    this._descriptors.longrunning = {
      batchUpdateIntents: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        batchUpdateIntentsResponse.decode.bind(batchUpdateIntentsResponse),
        batchUpdateIntentsMetadata.decode.bind(batchUpdateIntentsMetadata)
      ),
      batchDeleteIntents: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        batchDeleteIntentsResponse.decode.bind(batchDeleteIntentsResponse),
        batchDeleteIntentsMetadata.decode.bind(batchDeleteIntentsMetadata)
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.dialogflow.v2.Intents',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.intentsStub) {
      return this.intentsStub;
    }

    // Put together the "service stub" for
    // google.cloud.dialogflow.v2.Intents.
    this.intentsStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.dialogflow.v2.Intents'
          )
        : // tslint:disable-next-line no-any
          (this._protos as any).google.cloud.dialogflow.v2.Intents,
      this._opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const intentsStubMethods = [
      'listIntents',
      'getIntent',
      'createIntent',
      'updateIntent',
      'deleteIntent',
      'batchUpdateIntents',
      'batchDeleteIntents',
    ];

    for (const methodName of intentsStubMethods) {
      const innerCallPromise = this.intentsStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const apiCall = this._gaxModule.createApiCall(
        innerCallPromise,
        this._defaults[methodName],
        this._descriptors.page[methodName] ||
          this._descriptors.stream[methodName] ||
          this._descriptors.longrunning[methodName]
      );

      this._innerApiCalls[methodName] = (
        argument: {},
        callOptions?: CallOptions,
        callback?: APICallback
      ) => {
        return apiCall(argument, callOptions, callback);
      };
    }

    return this.intentsStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'dialogflow.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'dialogflow.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/dialogflow',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getIntent(
    request: protosTypes.google.cloud.dialogflow.v2.IGetIntentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.dialogflow.v2.IIntent,
      protosTypes.google.cloud.dialogflow.v2.IGetIntentRequest | undefined,
      {} | undefined
    ]
  >;
  getIntent(
    request: protosTypes.google.cloud.dialogflow.v2.IGetIntentRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.dialogflow.v2.IIntent,
      protosTypes.google.cloud.dialogflow.v2.IGetIntentRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Retrieves the specified intent.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the intent.
   *   Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
   * @param {string} [request.languageCode]
   *   Optional. The language to retrieve training phrases, parameters and rich
   *   messages for. If not specified, the agent's default language is used.
   *   [Many
   *   languages](https://cloud.google.com/dialogflow/docs/reference/language)
   *   are supported. Note: languages must be enabled in the agent before they can
   *   be used.
   * @param {google.cloud.dialogflow.v2.IntentView} [request.intentView]
   *   Optional. The resource view to apply to the returned intent.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Intent]{@link google.cloud.dialogflow.v2.Intent}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIntent(
    request: protosTypes.google.cloud.dialogflow.v2.IGetIntentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.dialogflow.v2.IIntent,
          protosTypes.google.cloud.dialogflow.v2.IGetIntentRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.dialogflow.v2.IIntent,
      protosTypes.google.cloud.dialogflow.v2.IGetIntentRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.dialogflow.v2.IIntent,
      protosTypes.google.cloud.dialogflow.v2.IGetIntentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.getIntent(request, options, callback);
  }
  createIntent(
    request: protosTypes.google.cloud.dialogflow.v2.ICreateIntentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.dialogflow.v2.IIntent,
      protosTypes.google.cloud.dialogflow.v2.ICreateIntentRequest | undefined,
      {} | undefined
    ]
  >;
  createIntent(
    request: protosTypes.google.cloud.dialogflow.v2.ICreateIntentRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.dialogflow.v2.IIntent,
      protosTypes.google.cloud.dialogflow.v2.ICreateIntentRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates an intent in the specified agent.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The agent to create a intent for.
   *   Format: `projects/<Project ID>/agent`.
   * @param {google.cloud.dialogflow.v2.Intent} request.intent
   *   Required. The intent to create.
   * @param {string} [request.languageCode]
   *   Optional. The language of training phrases, parameters and rich messages
   *   defined in `intent`. If not specified, the agent's default language is
   *   used. [Many
   *   languages](https://cloud.google.com/dialogflow/docs/reference/language)
   *   are supported. Note: languages must be enabled in the agent before they can
   *   be used.
   * @param {google.cloud.dialogflow.v2.IntentView} [request.intentView]
   *   Optional. The resource view to apply to the returned intent.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Intent]{@link google.cloud.dialogflow.v2.Intent}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createIntent(
    request: protosTypes.google.cloud.dialogflow.v2.ICreateIntentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.dialogflow.v2.IIntent,
          | protosTypes.google.cloud.dialogflow.v2.ICreateIntentRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.dialogflow.v2.IIntent,
      protosTypes.google.cloud.dialogflow.v2.ICreateIntentRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.dialogflow.v2.IIntent,
      protosTypes.google.cloud.dialogflow.v2.ICreateIntentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.createIntent(request, options, callback);
  }
  updateIntent(
    request: protosTypes.google.cloud.dialogflow.v2.IUpdateIntentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.dialogflow.v2.IIntent,
      protosTypes.google.cloud.dialogflow.v2.IUpdateIntentRequest | undefined,
      {} | undefined
    ]
  >;
  updateIntent(
    request: protosTypes.google.cloud.dialogflow.v2.IUpdateIntentRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.dialogflow.v2.IIntent,
      protosTypes.google.cloud.dialogflow.v2.IUpdateIntentRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Updates the specified intent.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.dialogflow.v2.Intent} request.intent
   *   Required. The intent to update.
   * @param {string} [request.languageCode]
   *   Optional. The language of training phrases, parameters and rich messages
   *   defined in `intent`. If not specified, the agent's default language is
   *   used. [Many
   *   languages](https://cloud.google.com/dialogflow/docs/reference/language)
   *   are supported. Note: languages must be enabled in the agent before they can
   *   be used.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. The mask to control which fields get updated.
   * @param {google.cloud.dialogflow.v2.IntentView} [request.intentView]
   *   Optional. The resource view to apply to the returned intent.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Intent]{@link google.cloud.dialogflow.v2.Intent}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateIntent(
    request: protosTypes.google.cloud.dialogflow.v2.IUpdateIntentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.dialogflow.v2.IIntent,
          | protosTypes.google.cloud.dialogflow.v2.IUpdateIntentRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.dialogflow.v2.IIntent,
      protosTypes.google.cloud.dialogflow.v2.IUpdateIntentRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.dialogflow.v2.IIntent,
      protosTypes.google.cloud.dialogflow.v2.IUpdateIntentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'intent.name': request.intent!.name || '',
    });
    this.initialize();
    return this._innerApiCalls.updateIntent(request, options, callback);
  }
  deleteIntent(
    request: protosTypes.google.cloud.dialogflow.v2.IDeleteIntentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      protosTypes.google.cloud.dialogflow.v2.IDeleteIntentRequest | undefined,
      {} | undefined
    ]
  >;
  deleteIntent(
    request: protosTypes.google.cloud.dialogflow.v2.IDeleteIntentRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      protosTypes.google.cloud.dialogflow.v2.IDeleteIntentRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Deletes the specified intent and its direct or indirect followup intents.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. The name of the intent to delete. If this intent has direct or
   *   indirect followup intents, we also delete them.
   *   Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteIntent(
    request: protosTypes.google.cloud.dialogflow.v2.IDeleteIntentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.dialogflow.v2.IDeleteIntentRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      protosTypes.google.cloud.dialogflow.v2.IDeleteIntentRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      protosTypes.google.cloud.dialogflow.v2.IDeleteIntentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this._innerApiCalls.deleteIntent(request, options, callback);
  }

  batchUpdateIntents(
    request: protosTypes.google.cloud.dialogflow.v2.IBatchUpdateIntentsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protosTypes.google.cloud.dialogflow.v2.IBatchUpdateIntentsResponse,
        protosTypes.google.protobuf.IStruct
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  batchUpdateIntents(
    request: protosTypes.google.cloud.dialogflow.v2.IBatchUpdateIntentsRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protosTypes.google.cloud.dialogflow.v2.IBatchUpdateIntentsResponse,
        protosTypes.google.protobuf.IStruct
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Updates/Creates multiple intents in the specified agent.
   *
   * Operation <response: {@link google.cloud.dialogflow.v2.BatchUpdateIntentsResponse|BatchUpdateIntentsResponse}>
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the agent to update or create intents in.
   *   Format: `projects/<Project ID>/agent`.
   * @param {string} request.intentBatchUri
   *   The URI to a Google Cloud Storage file containing intents to update or
   *   create. The file format can either be a serialized proto (of IntentBatch
   *   type) or JSON object. Note: The URI must start with "gs://".
   * @param {google.cloud.dialogflow.v2.IntentBatch} request.intentBatchInline
   *   The collection of intents to update or create.
   * @param {string} [request.languageCode]
   *   Optional. The language of training phrases, parameters and rich messages
   *   defined in `intents`. If not specified, the agent's default language is
   *   used. [Many
   *   languages](https://cloud.google.com/dialogflow/docs/reference/language)
   *   are supported. Note: languages must be enabled in the agent before they can
   *   be used.
   * @param {google.protobuf.FieldMask} [request.updateMask]
   *   Optional. The mask to control which fields get updated.
   * @param {google.cloud.dialogflow.v2.IntentView} [request.intentView]
   *   Optional. The resource view to apply to the returned intent.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  batchUpdateIntents(
    request: protosTypes.google.cloud.dialogflow.v2.IBatchUpdateIntentsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protosTypes.google.cloud.dialogflow.v2.IBatchUpdateIntentsResponse,
            protosTypes.google.protobuf.IStruct
          >,
          protosTypes.google.longrunning.IOperation | undefined,
          {} | undefined
        >,
    callback?: Callback<
      LROperation<
        protosTypes.google.cloud.dialogflow.v2.IBatchUpdateIntentsResponse,
        protosTypes.google.protobuf.IStruct
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    >
  ): Promise<
    [
      LROperation<
        protosTypes.google.cloud.dialogflow.v2.IBatchUpdateIntentsResponse,
        protosTypes.google.protobuf.IStruct
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.batchUpdateIntents(request, options, callback);
  }
  batchDeleteIntents(
    request: protosTypes.google.cloud.dialogflow.v2.IBatchDeleteIntentsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      LROperation<
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.protobuf.IStruct
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  batchDeleteIntents(
    request: protosTypes.google.cloud.dialogflow.v2.IBatchDeleteIntentsRequest,
    options: gax.CallOptions,
    callback: Callback<
      LROperation<
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.protobuf.IStruct
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Deletes intents in the specified agent.
   *
   * Operation <response: {@link google.protobuf.Empty|google.protobuf.Empty}>
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The name of the agent to delete all entities types for. Format:
   *   `projects/<Project ID>/agent`.
   * @param {number[]} request.intents
   *   Required. The collection of intents to delete. Only intent `name` must be
   *   filled in.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  batchDeleteIntents(
    request: protosTypes.google.cloud.dialogflow.v2.IBatchDeleteIntentsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          LROperation<
            protosTypes.google.protobuf.IEmpty,
            protosTypes.google.protobuf.IStruct
          >,
          protosTypes.google.longrunning.IOperation | undefined,
          {} | undefined
        >,
    callback?: Callback<
      LROperation<
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.protobuf.IStruct
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    >
  ): Promise<
    [
      LROperation<
        protosTypes.google.protobuf.IEmpty,
        protosTypes.google.protobuf.IStruct
      >,
      protosTypes.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.batchDeleteIntents(request, options, callback);
  }
  listIntents(
    request: protosTypes.google.cloud.dialogflow.v2.IListIntentsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.dialogflow.v2.IIntent[],
      protosTypes.google.cloud.dialogflow.v2.IListIntentsRequest | null,
      protosTypes.google.cloud.dialogflow.v2.IListIntentsResponse
    ]
  >;
  listIntents(
    request: protosTypes.google.cloud.dialogflow.v2.IListIntentsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.dialogflow.v2.IIntent[],
      protosTypes.google.cloud.dialogflow.v2.IListIntentsRequest | null,
      protosTypes.google.cloud.dialogflow.v2.IListIntentsResponse
    >
  ): void;
  /**
   * Returns the list of all intents in the specified agent.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The agent to list all intents from.
   *   Format: `projects/<Project ID>/agent`.
   * @param {string} [request.languageCode]
   *   Optional. The language to list training phrases, parameters and rich
   *   messages for. If not specified, the agent's default language is used.
   *   [Many
   *   languages](https://cloud.google.com/dialogflow/docs/reference/language)
   *   are supported. Note: languages must be enabled in the agent before they can
   *   be used.
   * @param {google.cloud.dialogflow.v2.IntentView} [request.intentView]
   *   Optional. The resource view to apply to the returned intent.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return in a single page. By
   *   default 100 and at most 1000.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value returned from a previous list request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Intent]{@link google.cloud.dialogflow.v2.Intent}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Intent]{@link google.cloud.dialogflow.v2.Intent} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListIntentsRequest]{@link google.cloud.dialogflow.v2.ListIntentsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListIntentsResponse]{@link google.cloud.dialogflow.v2.ListIntentsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listIntents(
    request: protosTypes.google.cloud.dialogflow.v2.IListIntentsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.dialogflow.v2.IIntent[],
          protosTypes.google.cloud.dialogflow.v2.IListIntentsRequest | null,
          protosTypes.google.cloud.dialogflow.v2.IListIntentsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.dialogflow.v2.IIntent[],
      protosTypes.google.cloud.dialogflow.v2.IListIntentsRequest | null,
      protosTypes.google.cloud.dialogflow.v2.IListIntentsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.dialogflow.v2.IIntent[],
      protosTypes.google.cloud.dialogflow.v2.IListIntentsRequest | null,
      protosTypes.google.cloud.dialogflow.v2.IListIntentsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this._innerApiCalls.listIntents(request, options, callback);
  }

  /**
   * Equivalent to {@link listIntents}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listIntents} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The agent to list all intents from.
   *   Format: `projects/<Project ID>/agent`.
   * @param {string} [request.languageCode]
   *   Optional. The language to list training phrases, parameters and rich
   *   messages for. If not specified, the agent's default language is used.
   *   [Many
   *   languages](https://cloud.google.com/dialogflow/docs/reference/language)
   *   are supported. Note: languages must be enabled in the agent before they can
   *   be used.
   * @param {google.cloud.dialogflow.v2.IntentView} [request.intentView]
   *   Optional. The resource view to apply to the returned intent.
   * @param {number} [request.pageSize]
   *   Optional. The maximum number of items to return in a single page. By
   *   default 100 and at most 1000.
   * @param {string} [request.pageToken]
   *   Optional. The next_page_token value returned from a previous list request.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Intent]{@link google.cloud.dialogflow.v2.Intent} on 'data' event.
   */
  listIntentsStream(
    request?: protosTypes.google.cloud.dialogflow.v2.IListIntentsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this._descriptors.page.listIntents.createStream(
      this._innerApiCalls.listIntents as gax.GaxCall,
      request,
      callSettings
    );
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified agent resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  agentPath(project: string) {
    return this._pathTemplates.agentPathTemplate.render({
      project,
    });
  }

  /**
   * Parse the project from Agent resource.
   *
   * @param {string} agentName
   *   A fully-qualified path representing Agent resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromAgentName(agentName: string) {
    return this._pathTemplates.agentPathTemplate.match(agentName).project;
  }

  /**
   * Return a fully-qualified context resource name string.
   *
   * @param {string} project
   * @param {string} session
   * @param {string} context
   * @returns {string} Resource name string.
   */
  contextPath(project: string, session: string, context: string) {
    return this._pathTemplates.contextPathTemplate.render({
      project,
      session,
      context,
    });
  }

  /**
   * Parse the project from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromContextName(contextName: string) {
    return this._pathTemplates.contextPathTemplate.match(contextName).project;
  }

  /**
   * Parse the session from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromContextName(contextName: string) {
    return this._pathTemplates.contextPathTemplate.match(contextName).session;
  }

  /**
   * Parse the context from Context resource.
   *
   * @param {string} contextName
   *   A fully-qualified path representing Context resource.
   * @returns {string} A string representing the context.
   */
  matchContextFromContextName(contextName: string) {
    return this._pathTemplates.contextPathTemplate.match(contextName).context;
  }

  /**
   * Return a fully-qualified entityType resource name string.
   *
   * @param {string} project
   * @param {string} entity_type
   * @returns {string} Resource name string.
   */
  entityTypePath(project: string, entityType: string) {
    return this._pathTemplates.entityTypePathTemplate.render({
      project,
      entity_type: entityType,
    });
  }

  /**
   * Parse the project from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromEntityTypeName(entityTypeName: string) {
    return this._pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .project;
  }

  /**
   * Parse the entity_type from EntityType resource.
   *
   * @param {string} entityTypeName
   *   A fully-qualified path representing EntityType resource.
   * @returns {string} A string representing the entity_type.
   */
  matchEntityTypeFromEntityTypeName(entityTypeName: string) {
    return this._pathTemplates.entityTypePathTemplate.match(entityTypeName)
      .entity_type;
  }

  /**
   * Return a fully-qualified intent resource name string.
   *
   * @param {string} project
   * @param {string} intent
   * @returns {string} Resource name string.
   */
  intentPath(project: string, intent: string) {
    return this._pathTemplates.intentPathTemplate.render({
      project,
      intent,
    });
  }

  /**
   * Parse the project from Intent resource.
   *
   * @param {string} intentName
   *   A fully-qualified path representing Intent resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromIntentName(intentName: string) {
    return this._pathTemplates.intentPathTemplate.match(intentName).project;
  }

  /**
   * Parse the intent from Intent resource.
   *
   * @param {string} intentName
   *   A fully-qualified path representing Intent resource.
   * @returns {string} A string representing the intent.
   */
  matchIntentFromIntentName(intentName: string) {
    return this._pathTemplates.intentPathTemplate.match(intentName).intent;
  }

  /**
   * Return a fully-qualified sessionEntityType resource name string.
   *
   * @param {string} project
   * @param {string} session
   * @param {string} entity_type
   * @returns {string} Resource name string.
   */
  sessionEntityTypePath(project: string, session: string, entityType: string) {
    return this._pathTemplates.sessionEntityTypePathTemplate.render({
      project,
      session,
      entity_type: entityType,
    });
  }

  /**
   * Parse the project from SessionEntityType resource.
   *
   * @param {string} sessionEntityTypeName
   *   A fully-qualified path representing SessionEntityType resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSessionEntityTypeName(sessionEntityTypeName: string) {
    return this._pathTemplates.sessionEntityTypePathTemplate.match(
      sessionEntityTypeName
    ).project;
  }

  /**
   * Parse the session from SessionEntityType resource.
   *
   * @param {string} sessionEntityTypeName
   *   A fully-qualified path representing SessionEntityType resource.
   * @returns {string} A string representing the session.
   */
  matchSessionFromSessionEntityTypeName(sessionEntityTypeName: string) {
    return this._pathTemplates.sessionEntityTypePathTemplate.match(
      sessionEntityTypeName
    ).session;
  }

  /**
   * Parse the entity_type from SessionEntityType resource.
   *
   * @param {string} sessionEntityTypeName
   *   A fully-qualified path representing SessionEntityType resource.
   * @returns {string} A string representing the entity_type.
   */
  matchEntityTypeFromSessionEntityTypeName(sessionEntityTypeName: string) {
    return this._pathTemplates.sessionEntityTypePathTemplate.match(
      sessionEntityTypeName
    ).entity_type;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.intentsStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
